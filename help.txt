using System;
using System.Collections.Generic;
using System.Linq;

namespace Rextester
{
    public class Program
    {
        public static void Main(string[] args)
        {
			//Your code goes here
			//remove sp char
			string s="Here is count of charater.some @ test #$ data.";
			var withoutSpecial = new string(s.Where(c => Char.IsLetterOrDigit(c)|| Char.IsWhiteSpace(c) ).ToArray());
			Console.WriteLine(withoutSpecial);
			//no of sentence
			string[] tokens = s.Split('.');
			Console.WriteLine(tokens.Count()-1);
			//lenght
			Console.WriteLine(s.Length);
        }
    }
}

/*rearrange*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Rextester
{
    public class Program
    {
        public static void Main(string[] args)
        {
            //Your code goes here
            Console.WriteLine("Hello, world!");
            int[] arr = {1,2,3,4,5,6,7,8};
            ReverseArray(arr);
        }
        static void ReverseArray<T>(T[] a)
        {
            ReverseArray(a,0,a.Length-1,a.Length/2);
        }

       static void ReverseArray<T>(T[] a,int lo,int hi,int mid)
        {
           
            if(lo > hi) return;

            // swap
            var temp = a[lo];
            a[lo] = a[hi];
            a[hi] = temp;
            Console.Write(a[hi]);
           if(mid>lo)
            Console.Write(a[lo]);
            ReverseArray(a,lo+1,hi-1,mid);
        }
    }
}

/*Min swap*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Rextester
{
    public class Program
    {
        public static void Main(string[] args)
        {
            //Your code goes here
            Console.WriteLine("Hello, world!");
            int[] intArray = {9,2,3,4,1,6,0,8};
            int min=Minimum(intArray, intArray.Length-1);
            Console.WriteLine("min "+min);

        }
        static Int32 Minimum(Int32[] arr, Int32 lastArrayIndex)
        {
            Int32 tmp;
            if (lastArrayIndex == 0) return arr[lastArrayIndex];
            tmp = Minimum(arr, lastArrayIndex - 1);
            if (arr[lastArrayIndex] < tmp) return arr[lastArrayIndex];
            return tmp;
        }
    }
}
